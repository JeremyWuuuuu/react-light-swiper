'use strict';

process.on('unhandledRejection', err => {
  throw err;
});

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const url = require('url');

const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpack.config.server');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

if (!checkRequiredFiles([paths.indexHTML, paths.entry])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

// run on a different port. `detect()` Promise resolves to the next free port.
const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
const appName = require(paths.packageJSON).name;
const launchURL = url.format({
  hostname: 'localhost',
  protocol,
  port: DEFAULT_PORT,
  pathname: '/'
})
// Create a webpack compiler that is configured with custom messages.
const compiler = webpack(config);
// Load proxy config
const proxySetting = require(paths.packageJSON).proxy;
const proxyConfig = undefined;
// Serve webpack assets generated by the compiler over a web sever.
const serverConfig = createDevServerConfig(
  proxyConfig,
  require('address').ip()
);
const devServer = new WebpackDevServer(compiler, serverConfig);
// Launch WebpackDevServer.
console.log(launchURL);
devServer.listen(DEFAULT_PORT, HOST, err => {
  if (err) {
    return console.log(err);
  }
  if (isInteractive) {
    clearConsole();
  }
  console.log(chalk.cyan(`Starting the development server at port ${DEFAULT_PORT}...\n`));
  openBrowser(launchURL);
});

['SIGINT', 'SIGTERM'].forEach(function (sig) {
  process.on(sig, function () {
    devServer.close();
    process.exit();
  });
});